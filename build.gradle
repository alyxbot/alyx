/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.5.1/userguide/tutorial_java_projects.html
 */


plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id "com.github.spotbugs" version "4.4.4"
    id 'jacoco'

    // plugin that checks for dependency updates
    id "com.github.ben-manes.versions" version "0.28.0"
}

group 'gg.sep'
version '1.0-SNAPSHOT'

sourceCompatibility = 11.0
targetCompatibility = 11.0

// variable definitions
ext {
    lombokVersion = '1.18.+'
    checkstyleVersion = '8.26'
    spotbugsVersion = '4.0.6'
    log4jVersion = '2.13.+'
    junitVersion = '5.6.+'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

configurations {
    sepBuildConfig
}

dependencies {
    // alyx core dependencies
    implementation "net.dv8tion:JDA:4.+" // JDA for Discord API
    implementation "org.beryx:text-io:3.3.0" // for interactive setup
    implementation "net.harawata:appdirs:1.1.+" // for platform independent application dirs
    implementation "com.github.Seputaes:result:1.1.1"
    implementation "org.pf4j:pf4j:3.3.+"

    // External Utilities and Libraries
    implementation "commons-cli:commons-cli:1.4"
    implementation "com.google.guava:guava:28.1-jre"
    implementation "com.google.code.gson:gson:2.8.+"
    implementation "org.apache.commons:commons-collections4:4.+"
    implementation "org.apache.commons:commons-lang3:3.+"
    implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"

    // build dependencies
    sepBuildConfig "com.github.Seputaes:sep-java-build-config:0.3.0"
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotbugsVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // Use JUnit Jupiter API for testing.
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    // Use Mockito for Testing
    testImplementation "org.mockito:mockito-core:3.3.+"

}

task extractFile(type: Copy) {
    from {
        zipTree(configurations.sepBuildConfig.singleFile)
    }
    into "${buildDir}/"
    include "configuration/"
}

checkstyle {
    ignoreFailures false
    configFile file("${buildDir}/configuration/checkstyle/checkstyle.xml")
    configDirectory = file("${buildDir}/configuration/checkstyle")
    toolVersion checkstyleVersion
}
checkstyleMain.dependsOn extractFile
checkstyleTest.dependsOn extractFile

spotbugs {
    toolVersion = '4.0.6'
}

def spotbugsReports = {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
spotbugsTest {
    spotbugsReports
}

jacocoTestReport {
    reports {
        html.enabled = true
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0 // TODO
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification


// unchecked and deprecation should produce warnings
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

application {
    // Define the main class for the application
    mainClassName = 'gg.sep.alyx.Launcher'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}
